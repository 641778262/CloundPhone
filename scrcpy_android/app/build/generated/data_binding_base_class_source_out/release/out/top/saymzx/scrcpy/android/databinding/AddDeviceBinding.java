// Generated by view binder compiler. Do not edit!
package top.saymzx.scrcpy.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.Switch;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import top.saymzx.scrcpy.android.R;

public final class AddDeviceBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final EditText addDeviceAddress;

  @NonNull
  public final Spinner addDeviceAudioCodec;

  @NonNull
  public final Spinner addDeviceFps;

  @NonNull
  public final CheckBox addDeviceIsOptions;

  @NonNull
  public final Spinner addDeviceMaxSize;

  @NonNull
  public final EditText addDeviceName;

  @NonNull
  public final Button addDeviceOk;

  @NonNull
  public final LinearLayout addDeviceOptions;

  @NonNull
  public final EditText addDevicePort;

  @NonNull
  public final Switch addDeviceSetResolution;

  @NonNull
  public final Spinner addDeviceVideoBit;

  @NonNull
  public final Spinner addDeviceVideoCodec;

  private AddDeviceBinding(@NonNull ScrollView rootView, @NonNull EditText addDeviceAddress,
      @NonNull Spinner addDeviceAudioCodec, @NonNull Spinner addDeviceFps,
      @NonNull CheckBox addDeviceIsOptions, @NonNull Spinner addDeviceMaxSize,
      @NonNull EditText addDeviceName, @NonNull Button addDeviceOk,
      @NonNull LinearLayout addDeviceOptions, @NonNull EditText addDevicePort,
      @NonNull Switch addDeviceSetResolution, @NonNull Spinner addDeviceVideoBit,
      @NonNull Spinner addDeviceVideoCodec) {
    this.rootView = rootView;
    this.addDeviceAddress = addDeviceAddress;
    this.addDeviceAudioCodec = addDeviceAudioCodec;
    this.addDeviceFps = addDeviceFps;
    this.addDeviceIsOptions = addDeviceIsOptions;
    this.addDeviceMaxSize = addDeviceMaxSize;
    this.addDeviceName = addDeviceName;
    this.addDeviceOk = addDeviceOk;
    this.addDeviceOptions = addDeviceOptions;
    this.addDevicePort = addDevicePort;
    this.addDeviceSetResolution = addDeviceSetResolution;
    this.addDeviceVideoBit = addDeviceVideoBit;
    this.addDeviceVideoCodec = addDeviceVideoCodec;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static AddDeviceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddDeviceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_device, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddDeviceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_device_address;
      EditText addDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceAddress == null) {
        break missingId;
      }

      id = R.id.add_device_audioCodec;
      Spinner addDeviceAudioCodec = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceAudioCodec == null) {
        break missingId;
      }

      id = R.id.add_device_fps;
      Spinner addDeviceFps = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceFps == null) {
        break missingId;
      }

      id = R.id.add_device_is_options;
      CheckBox addDeviceIsOptions = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceIsOptions == null) {
        break missingId;
      }

      id = R.id.add_device_max_size;
      Spinner addDeviceMaxSize = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceMaxSize == null) {
        break missingId;
      }

      id = R.id.add_device_name;
      EditText addDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceName == null) {
        break missingId;
      }

      id = R.id.add_device_ok;
      Button addDeviceOk = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceOk == null) {
        break missingId;
      }

      id = R.id.add_device_options;
      LinearLayout addDeviceOptions = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceOptions == null) {
        break missingId;
      }

      id = R.id.add_device_port;
      EditText addDevicePort = ViewBindings.findChildViewById(rootView, id);
      if (addDevicePort == null) {
        break missingId;
      }

      id = R.id.add_device_set_resolution;
      Switch addDeviceSetResolution = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceSetResolution == null) {
        break missingId;
      }

      id = R.id.add_device_video_bit;
      Spinner addDeviceVideoBit = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceVideoBit == null) {
        break missingId;
      }

      id = R.id.add_device_videoCodec;
      Spinner addDeviceVideoCodec = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceVideoCodec == null) {
        break missingId;
      }

      return new AddDeviceBinding((ScrollView) rootView, addDeviceAddress, addDeviceAudioCodec,
          addDeviceFps, addDeviceIsOptions, addDeviceMaxSize, addDeviceName, addDeviceOk,
          addDeviceOptions, addDevicePort, addDeviceSetResolution, addDeviceVideoBit,
          addDeviceVideoCodec);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
