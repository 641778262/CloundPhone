// Generated by view binder compiler. Do not edit!
package top.saymzx.scrcpy.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import top.saymzx.scrcpy.android.R;

public final class ActivitySetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView setBack;

  @NonNull
  public final Switch setCheckUpdate;

  @NonNull
  public final TextView setClearDefult;

  @NonNull
  public final Spinner setDefaultAudioCodec;

  @NonNull
  public final Switch setDefaultDefaultFull;

  @NonNull
  public final Spinner setDefaultFps;

  @NonNull
  public final Spinner setDefaultMaxSize;

  @NonNull
  public final Switch setDefaultSetResolution;

  @NonNull
  public final Spinner setDefaultVideoBit;

  @NonNull
  public final Spinner setDefaultVideoCodec;

  @NonNull
  public final TextView setExportJson;

  @NonNull
  public final TextView setExportKey;

  @NonNull
  public final ImageView setFloatNavPreview;

  @NonNull
  public final SeekBar setFloatNavSize;

  @NonNull
  public final TextView setImportJson;

  @NonNull
  public final TextView setImportKey;

  @NonNull
  public final TextView setIndex;

  @NonNull
  public final TextView setPrivacy;

  @NonNull
  public final TextView setRenewKey;

  @NonNull
  public final Switch setShowFps;

  @NonNull
  public final Switch setSlaveTurnOffScreen;

  @NonNull
  public final TextView setVersionName;

  private ActivitySetBinding(@NonNull LinearLayout rootView, @NonNull ImageView setBack,
      @NonNull Switch setCheckUpdate, @NonNull TextView setClearDefult,
      @NonNull Spinner setDefaultAudioCodec, @NonNull Switch setDefaultDefaultFull,
      @NonNull Spinner setDefaultFps, @NonNull Spinner setDefaultMaxSize,
      @NonNull Switch setDefaultSetResolution, @NonNull Spinner setDefaultVideoBit,
      @NonNull Spinner setDefaultVideoCodec, @NonNull TextView setExportJson,
      @NonNull TextView setExportKey, @NonNull ImageView setFloatNavPreview,
      @NonNull SeekBar setFloatNavSize, @NonNull TextView setImportJson,
      @NonNull TextView setImportKey, @NonNull TextView setIndex, @NonNull TextView setPrivacy,
      @NonNull TextView setRenewKey, @NonNull Switch setShowFps,
      @NonNull Switch setSlaveTurnOffScreen, @NonNull TextView setVersionName) {
    this.rootView = rootView;
    this.setBack = setBack;
    this.setCheckUpdate = setCheckUpdate;
    this.setClearDefult = setClearDefult;
    this.setDefaultAudioCodec = setDefaultAudioCodec;
    this.setDefaultDefaultFull = setDefaultDefaultFull;
    this.setDefaultFps = setDefaultFps;
    this.setDefaultMaxSize = setDefaultMaxSize;
    this.setDefaultSetResolution = setDefaultSetResolution;
    this.setDefaultVideoBit = setDefaultVideoBit;
    this.setDefaultVideoCodec = setDefaultVideoCodec;
    this.setExportJson = setExportJson;
    this.setExportKey = setExportKey;
    this.setFloatNavPreview = setFloatNavPreview;
    this.setFloatNavSize = setFloatNavSize;
    this.setImportJson = setImportJson;
    this.setImportKey = setImportKey;
    this.setIndex = setIndex;
    this.setPrivacy = setPrivacy;
    this.setRenewKey = setRenewKey;
    this.setShowFps = setShowFps;
    this.setSlaveTurnOffScreen = setSlaveTurnOffScreen;
    this.setVersionName = setVersionName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_set, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.set_back;
      ImageView setBack = ViewBindings.findChildViewById(rootView, id);
      if (setBack == null) {
        break missingId;
      }

      id = R.id.set_check_update;
      Switch setCheckUpdate = ViewBindings.findChildViewById(rootView, id);
      if (setCheckUpdate == null) {
        break missingId;
      }

      id = R.id.set_clear_defult;
      TextView setClearDefult = ViewBindings.findChildViewById(rootView, id);
      if (setClearDefult == null) {
        break missingId;
      }

      id = R.id.set_default_audioCodec;
      Spinner setDefaultAudioCodec = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultAudioCodec == null) {
        break missingId;
      }

      id = R.id.set_default_default_full;
      Switch setDefaultDefaultFull = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultDefaultFull == null) {
        break missingId;
      }

      id = R.id.set_default_fps;
      Spinner setDefaultFps = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultFps == null) {
        break missingId;
      }

      id = R.id.set_default_max_size;
      Spinner setDefaultMaxSize = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultMaxSize == null) {
        break missingId;
      }

      id = R.id.set_default_set_resolution;
      Switch setDefaultSetResolution = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultSetResolution == null) {
        break missingId;
      }

      id = R.id.set_default_video_bit;
      Spinner setDefaultVideoBit = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultVideoBit == null) {
        break missingId;
      }

      id = R.id.set_default_videoCodec;
      Spinner setDefaultVideoCodec = ViewBindings.findChildViewById(rootView, id);
      if (setDefaultVideoCodec == null) {
        break missingId;
      }

      id = R.id.set_export_json;
      TextView setExportJson = ViewBindings.findChildViewById(rootView, id);
      if (setExportJson == null) {
        break missingId;
      }

      id = R.id.set_export_key;
      TextView setExportKey = ViewBindings.findChildViewById(rootView, id);
      if (setExportKey == null) {
        break missingId;
      }

      id = R.id.set_float_nav_preview;
      ImageView setFloatNavPreview = ViewBindings.findChildViewById(rootView, id);
      if (setFloatNavPreview == null) {
        break missingId;
      }

      id = R.id.set_float_nav_size;
      SeekBar setFloatNavSize = ViewBindings.findChildViewById(rootView, id);
      if (setFloatNavSize == null) {
        break missingId;
      }

      id = R.id.set_import_json;
      TextView setImportJson = ViewBindings.findChildViewById(rootView, id);
      if (setImportJson == null) {
        break missingId;
      }

      id = R.id.set_import_key;
      TextView setImportKey = ViewBindings.findChildViewById(rootView, id);
      if (setImportKey == null) {
        break missingId;
      }

      id = R.id.set_index;
      TextView setIndex = ViewBindings.findChildViewById(rootView, id);
      if (setIndex == null) {
        break missingId;
      }

      id = R.id.set_privacy;
      TextView setPrivacy = ViewBindings.findChildViewById(rootView, id);
      if (setPrivacy == null) {
        break missingId;
      }

      id = R.id.set_renew_key;
      TextView setRenewKey = ViewBindings.findChildViewById(rootView, id);
      if (setRenewKey == null) {
        break missingId;
      }

      id = R.id.set_show_fps;
      Switch setShowFps = ViewBindings.findChildViewById(rootView, id);
      if (setShowFps == null) {
        break missingId;
      }

      id = R.id.set_slave_turn_off_screen;
      Switch setSlaveTurnOffScreen = ViewBindings.findChildViewById(rootView, id);
      if (setSlaveTurnOffScreen == null) {
        break missingId;
      }

      id = R.id.set_version_name;
      TextView setVersionName = ViewBindings.findChildViewById(rootView, id);
      if (setVersionName == null) {
        break missingId;
      }

      return new ActivitySetBinding((LinearLayout) rootView, setBack, setCheckUpdate,
          setClearDefult, setDefaultAudioCodec, setDefaultDefaultFull, setDefaultFps,
          setDefaultMaxSize, setDefaultSetResolution, setDefaultVideoBit, setDefaultVideoCodec,
          setExportJson, setExportKey, setFloatNavPreview, setFloatNavSize, setImportJson,
          setImportKey, setIndex, setPrivacy, setRenewKey, setShowFps, setSlaveTurnOffScreen,
          setVersionName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
